
class Calc:
    def add(self,a,b):
        return a + b

    def minus(self,a,b):
        return a - b

    def multi(self,a,b):
        return a * b

    def devision(self,a,b):
        return a / b


# # 准备数据
# a = 6
# b = 5
# c = 11
#
# # 执行测试
# calc = Calc()
#
# s = calc.add(a,b)
#
# # 对比实际结果与期望结果是否一样，看用例是否通过
# if s != c:
#     print("用例不通过！")
# else:
#     print("用例通过！")
#











'''
    1.单元测试
        unittest
        TestCase:
            testXxx
    参数化：
        数据，驱动测试进行。
        DDT: data driver test
    1.ddt  data  unpack
    单元测试：
        针对系统的业务逻辑进行测试。
任务1：
    将参数化的数据写到excel表里，并将执行结果回写excel表里。
    实现邮件的发送报告。
任务2：
    还剩4个模块，

'''
from unittest import TestCase
from ddt import  ddt
from ddt import data
from ddt import unpack
from Calc import Calc

# 数据源
da = [
    [1,1,2],
    [2,3,5],
    [-9,5,-4],
    [-4,4,0],
    [0,4,4]
]


@ddt   # 这个类就是参数化类
class TestCalc(TestCase):

    @data(*da)
    @unpack  #解包
    def testAdd(self,a,b,c):

        calc = Calc()
        s = calc.add(a,b)

        # 断言
        self.assertEqual(s,c)


















# author:jason
import random
# 银行库
bank = {}
bank_name = "中国工商银行昌平支行"
bank_choice = {"1": "开户", "2": "存钱", "3": "取钱", "4": "转账", "5": "查询", "6": "Bye"}  # 银行业务选项
# 开户成功的信息模板
myinfo = '''
    \033[0;32;40m
    ------------账户信息------------
    账号：{account}
    姓名：{username}
    密码：{password}
    地址：
        国家：{country}
        省份：{province}
        街道：{street}
        门牌号：{door}
    账户余额：{money}
    注册银行名：{bank_name}
    -------------------------------
    \033[0m
'''


# 欢迎模板
welcome = '''
***********************************
*      中国工商银行账户管理系统       *
***********************************
*               选项              *
'''

welcome_item = '''*              {0}.{1}             *'''


def print_welcome():
    print(welcome, end="")
    keys = bank_choice.keys()
    for i in keys:
        print(welcome_item.format(i, bank_choice[i]))
    print("**********************************")


# 输入帮助方法：chose是打印选项
def inputHelp(chose, datatype="str"):
    while True:
        print("请输入", chose, ":")
        i = input(">>>:")
        if len(i) == 0:
            print("该项不能为空！请重新输入！")
            continue
        if datatype != "str":
            return int(i)
        else:
            return i


# 判断是否存在该银行选项
def isExists(chose, data):
    if chose in data:
        return True
    return False


# 获取随机码
def getRandom():
    li = "0123456789qwertyuiopasdfghjklzxcvbnmZXCVBNMASDFGHJKLQWERTYUIOP"
    string = ""
    for i in range(8):
        string = string + li[int(random.random() * len(li))]
    return string


# 通过账号获取账户信息
def findByAccount(account):
    for i in bank.keys():
        if bank[i]["account"] == account:
            return i
    return None


# 银行的开户方法
def bank_addUser(username, password, country, province, street, door, money):
    # 查询是否已满
    if len(bank) >= 100:
        return 3

    # 查询是否存在
    if username in bank:
        return 2

    # 插入数据
    
    bank[username] = {"account": getRandom(), "password": password, "country": country, "province": province,
                      "street": street, "door": door, "money": money, "bank_name": bank_name}
    return 1


# 银行的存钱方法
def bank_saveMoney(ac, money):
    for i in bank.keys():
        if bank[i]["account"] == ac:
            print(bank[i]["money"])
            bank[i]["money"] += money
            return True
    return False


# 银行的查询功能
def bank_selectUser(account, password):

    uname = findByAccount(account)

    if uname != None and len(uname) != 0:
        if password == bank[uname]["password"]:
            user = bank[uname]
            print(myinfo.format(account=user["account"], username=uname, password=user["password"],
                                country=user["country"], province=user["province"], street=user["street"],
                                door=user["door"], money=user["money"], bank_name=user["bank_name"]))
        else:
            print("用户密码错误！")
    else:
        print("该用户不存在！")


# 银行的取钱功能
def bank_takeMoney(account, password, money):
    uname = findByAccount(account)
    if uname != None:
        if bank[uname]["password"] == password:
            if bank[uname]["money"] < money:
                return 3
            else:
                bank[uname]["money"] -= money
                return 0
        else:
            return 2
    else:
        return 0


# 银行的转账功能
def bank_transformMoney(outputaccount, inputaccount, outputpassword, outputmoney):
    status = bank_takeMoney(outputaccount, outputpassword, outputmoney)
    if status == 1:
        return status
    elif status == 2:
        return status
    elif status == 3:
        return status

    if inputaccount != None and findByAccount(inputaccount) != None:
        bank_saveMoney(inputaccount, outputmoney)
        return 0
    else:
        return 1


# # 开户方法
# def addUser():
#     username = inputHelp("用户名")
#     password = inputHelp("密码")
#     country = inputHelp("居住地址：1.国家：")
#     province = inputHelp("省份")
#     street = inputHelp("街道")
#     door = inputHelp("门牌号")
#     money = inputHelp("银行卡余额", "int")
#
#     # 调用银行的开户方法完成开户操作  返回 1 2 3
#     status = bank_addUser(username, password, country, province, street, door, money)
#     # 判断1   2   3
#     if status == 1:
#         user = bank[username]
#         print("恭喜开户成功！以下是您的开户信息：")
#         print(myinfo.format(account=user["account"],
#                             username=username,
#                             password=user["password"],
#                             country=user["country"],
#                             province=user["province"],
#                             street=user["street"],
#                             door=user["door"],
#                             money=user["money"],
#                             bank_name=user["bank_name"]
#                             ))
#     elif status == 2:
#         print("改用户已经存在！请携带证件到其他银行办理！谢谢！！！！！")
#     elif status == 3:
#         print("银行库已满！请携带证件到其他银行办理！谢谢！！！！！")
#
#
# # 存钱
# def saveMoney():
#     account = inputHelp("账号")
#     m = inputHelp("存入的金额", "int")
#
#     flag = bank_saveMoney(account, m)
#
#     if flag:
#         print("存储成功!您的个人信息为：")
#         uname = findByAccount(account)
#         user = bank[uname]
#         print(myinfo.format(account=user["account"],
#                             username=uname,
#                             password=user["password"],
#                             country=user["country"],
#                             province=user["province"],
#                             street=user["street"],
#                             door=user["door"],
#                             money=user["money"],
#                             bank_name=user["bank_name"]
#                             ))
#     else:
#         print("对不起，您的个人信息不存在！请先开户后再次操作！")
#
#
# # 取钱
# def takeMoney():
#     account = inputHelp("账户")
#     password = inputHelp("密码")
#     tmoney = inputHelp("取出金额", "int")
#
#     f = bank_takeMoney(account, password, tmoney)
#
#     if f == 1:
#         print("改用户不存在！")
#     elif f == 2:
#         print("密码错误！")
#     elif f == 3:
#         print("取款金额不足！")
#     elif f == 0:
#         print("取款成功！")
#         bank_selectUser(account, password)
#
#
# # 转账功能
# def transformMoney():
#     output = inputHelp("转出的账号")
#     input = inputHelp("转入的账号")
#     outputpass = inputHelp("转出的密码")
#     outputmoney = inputHelp("要转出的金额", "int")
#
#     f = bank_transformMoney(output, input, outputpass, outputmoney)
#
#     if f == 1:
#         print("转出或转入的账号不存在！")
#     elif f == 2:
#         print("输入密码错误！")
#     elif f == 3:
#         print("转账金额不足！")
#     else:
#         print("转账成功！")
#         print("您的个人信息：")
#         bank_selectUser(output, outputpass)
#
#
# # 查询账户方法
# def selectUser():
#     account = inputHelp("账号")
#     password = inputHelp("密码")
#
#     bank_selectUser(account, password)
#
#
# # 核心程序
# while True:
#
#     print_welcome()
#     chose = inputHelp("选项")
#     if isExists(chose, bank_choice):
#         if chose == "1":
#             addUser()
#         elif chose == "2":
#             saveMoney()
#         elif chose == "3":
#             takeMoney()
#         elif chose == "4":
#             transformMoney()
#         elif chose == "5":
#             selectUser()
#         elif chose == "6":
#             print("Bye,Bye您嘞！！！！")
#             break
#     else:
#         print("不存在改选项，别瞎弄！")

import xlrd
from 工商银行完整版 import *
from unittest import TestCase
from ddt import ddt
from ddt import data
from ddt import unpack
from xlutils.copy import copy
import smtplib
from email.mime.text import MIMEText
from email.header import Header
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
da1 = []
da2 = []
da3 = []
da4 = []
da5 = []
wb = xlrd.open_workbook(filename=r"C:\Users\微软微软\Desktop\python学习新\day14【参数化测试】\bank.xls", encoding_override=True)
sh = wb.sheet_names()
wb_len = len(wb.sheets())
wb_copy = copy(wb)

for i in range(wb_len):
    st = wb.sheet_by_index(i)
    rows = st.nrows
    for j in range(1, rows):
        dt = st.row_values(j)
        if i == 0:
            da1.append([dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7], j])
        elif i == 1:
            da2.append([dt[0], dt[1], dt[2], j])
        elif i == 2:
            da3.append([dt[0], dt[1], dt[2], dt[3], j])
        elif i == 3:
            da4.append([dt[0], dt[1], dt[2], dt[3], dt[4], j])
        elif i == 4:
            da5.append([dt[0], dt[1], dt[2], j])


@ddt   # 这个类就是参数化类
class TestBank(TestCase):
    global wb_copy

    @data(*da1)
    @unpack  # 解包
    def testAddUser(self, a, b, c, d, e, f, g, h, k):
        result = bank_addUser(a, b, c, d, e, f, g)
        if result == h:  # 让程序自动将测试结果写到excel表里。
            wb_copy.get_sheet(0).write(k, 8, "通过！")
            wb_copy.save('bank.xls')
        else:
            wb_copy.get_sheet(0).write(k, 8, "不通过")
            wb_copy.save('bank.xls')
        # 断言
        self.assertEqual(result, h)

    @data(*da2)
    @unpack  # 解包
    def testSaveMoney(self, a, b, c, d):
        result = bank_saveMoney(a, b)
        if result == c:  # 让程序自动将测试结果写到excel表里。
            wb_copy.get_sheet(1).write(d, 3, "通过！")
            wb_copy.save('bank.xls')
        else:
            wb_copy.get_sheet(1).write(d, 3, "不通过")
            wb_copy.save('bank.xls')
        # 断言
        self.assertEqual(result, c)

    @data(*da3)
    @unpack  # 解包
    def testTakeMoney(self, a, b, c, d, e):
        result = bank_takeMoney(a, b, c)
        if result == d:  # 让程序自动将测试结果写到excel表里。
            wb_copy.get_sheet(2).write(e, 4, "通过！")
            wb_copy.save('bank.xls')
        else:
            wb_copy.get_sheet(2).write(e, 4, "不通过")
            wb_copy.save('bank.xls')
        # 断言
        self.assertEqual(result, d)

    @data(*da4)
    @unpack  # 解包
    def testTransformMoney(self, a, b, c, d, e, f):
        result = bank_transformMoney(a, b, c, d)
        if result == e:  # 让程序自动将测试结果写到excel表里。
            wb_copy.get_sheet(3).write(f, 5, "通过！")
            wb_copy.save('bank.xls')
        else:
            wb_copy.get_sheet(3).write(f, 5, "不通过")
            wb_copy.save('bank.xls')
        # 断言
        self.assertEqual(result, e)

    @data(*da5)
    @unpack  # 解包
    def testSelectUser(self, a, b, c, d):
        result = bank_selectUser(a, b)
        if result == c:  # 让程序自动将测试结果写到excel表里。
            wb_copy.get_sheet(4).write(d, 3, "通过！")
            wb_copy.save('bank.xls')
        else:
            wb_copy.get_sheet(4).write(d, 3, "不通过")
            wb_copy.save('bank.xls')
        # 断言
        self.assertEqual(result, c)


def send_email(name):
    sender = '1004515171@qq.com'
    passwd = "apnhvzzmsgjpbdbj"
    receivers = '1004515171@qq.com'
    subject = '工商银行管理系统测试'

    # 构造邮件对象
    message = MIMEMultipart()
    message['From'] = Header("cc", 'utf-8')
    message['To'] = Header("ll", 'utf-8')
    message['Subject'] = Header(subject, 'utf-8')
    message_content = "附件为测试结果"
    message.attach(MIMEText(message_content, 'plain', 'utf-8'))

    # 添加附件
    with open(name, mode='rb') as f:
        att_file = f.read()
    att1 = MIMEApplication(att_file)
    att1["Content-Type"] = 'application/octet-stream'
    att1["Content-Disposition"] = 'attachment; filename="%s"' % name
    message.attach(att1)

    # 发送邮件
    try:
        smtpobj = smtplib.SMTP_SSL("smtp.qq.com", 465)
        smtpobj.login(sender, passwd)
        smtpobj.sendmail(sender, receivers, message.as_string())
        smtpobj.quit()
        print("邮件发送成功")
    except smtplib.SMTPException as cause:
        print("无法发送邮件", cause)


send_email("bank.xls")
